git status: kiểm tra trạng thái
git add . : thêm vào Staged
git restore --staged <file or .>: thoát khỏi Staged
git commit -m "<message>": đưa vào CSDLgit 
git log: xem tất cả commit 
git log --oneline : xem tất cả commit ngắn gọn
git restore <file or .>: phục hồi dữ liệu(không ghi lại hoạt động xóa - không cần commit hay add), cũng có thể là snapshot 
git diff: so sánh sự thay đổi giữa file mới chỉnh(chưa add vào Staged) và file commit lần cuối
git diff --staged : so sánh sự thay đổi giữa file Staged (đã add vào Staged) và file commit lần cuối
git diff <IDcommit(1)> <IDcommit(2)>: so sánh sự thay đổi giữa file commit (1) và (2)
git diff <IDcommit(1)> <IDcommit(2)> --stat: so sánh ngắn gọn hơn giữa (1) và (2)
git checkout <mã ID của commit (git log --oneline để lấy mã)> --<file or .>: phục hồi file ở bất kỳ commit nào và file phục hồi sẽ được đánh dấu vào Staged.
git commit --amend -m "<message>": cập nhật file mà ko cần tạo commit (ghi đè lên commit)
-------------------------------------------------------
git reset --soft HEAD~1: xóa commit cuối và đưa về Staged
git reset --hard HEAD~1: xóa commit vĩnh viễn và trả về commit trước đó (nếu số 2 là xóa 2 nhánh liền kề, thêm bao nhiêu thì xóa bao nhiêu)
git reset -- <file or .>: xóa Staged trở về trạng thái khi chưa add
-------------------------------------------------------
git branch: kiểm tra nhánh (HEAD ở đâu là main ở đó)
git branch <name_newbranch>: tạo nhánh ngay tại HEAD 
(Cây1----Cây2----Cây3(HEAD) vậy ở Cây3 đang là main, nếu tạo thêm thì Cây3 có 2 nhánh là main và alpha. (HEAD->master)
git checkout <namebranch>: chuyển nhánh
git switch <name>  :chuyển nhánh
(Cây3 chuyển nhánh qua alpha, alpha sẽ kế thừa tất cả của main, nhưng không thay đổi nhánh main (HEAD->alpha)
---------------
git merge <namebranch>: hợp nhất nhánh main với nhánh <namebranch> đã gọi
git merge --abort: hủy bỏ hợp nhất 2 nhánh khi xung đột
git branch -d <namebranch>:xóa nhánh
git log --oneline --graph: xem các nhánh commit với biểu đồ (đỏ: merge lần cuối, xanh: merge từ trước)

-----
tạo file .gitignore ở thư mục gốc, sau đó muốn git bỏ qua các file thì soạn cú pháp *.<đuôi tệp> tại file .gitignore
EX:  *.html  *.css   => git sẽ bỏ qua mà không cần duyệt mấy file có đuôi tệp này
EX:  Tep             => git sẽ bỏ qua mà không cần duyệt mấy tệp tin có tên này
---
git commit -m "master-SM_001-Minh_modified_login_window: Your messsage"

	SM_001 check out tu master
	Minh_modified_login_window checkout tu SM_001





